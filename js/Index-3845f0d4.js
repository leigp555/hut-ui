import{D as e,C as n}from"./DemoDisplay-d6102924.js";import{c as t,_ as o,a as l}from"./Upload.vue_vue_type_style_index_0_lang-dcc18adf.js";import{_ as a,P as s,T as u}from"./Footer-492e9d3a.js";import{d as c,c as r,i,g as p,f as m,m as v,j as d,l as g,r as h,t as x,e as f,F as _,h as C,_ as y,x as S}from"./index-4bdb761c.js";import{_ as w}from"./ApiIntro-e7a82855.js";import{g as b,a as A}from"./helper-f72534c2.js";const I=g("p",null,"输入框自动完成功能。",-1),T=g("ul",null,[g("li",null,"AutoComplete: 主要组件")],-1),D=g("ul",null,[g("li",null,"需要一个输入框而不是选择器。"),g("li",null,"需要输入建议/辅助提示。")],-1),V=c({__name:"Intro",setup:e=>(e,n)=>(r(),i(v(u),null,{default:p((()=>[m(v(a),null,{default:p((()=>[d("简介")])),_:1}),m(v(s),null,{default:p((()=>[I])),_:1}),m(v(a),null,{default:p((()=>[d("组件概览")])),_:1}),m(v(s),null,{default:p((()=>[T])),_:1}),m(v(a),null,{default:p((()=>[d("使用场景")])),_:1}),m(v(s),null,{default:p((()=>[D])),_:1})])),_:1}))}),$=c({__name:"Api",setup(e){const n=[{rowIndex:1,"事件名称":"search","说明":"搜索补全项的时候调用","回调参数":"(value)=>({value:any}[])"},{rowIndex:1,"事件名称":"select","说明":"被选中时调用，参数为选中项的 value 值","回调参数":"(value)=>void"}],t=[{componentName:"AutoComplete",attrContent:[{rowIndex:1,"属性":"value","说明":"输入框文字","类型":"string","默认值":"null"},{rowIndex:2,"属性":"options","说明":"弹出框内容","类型":"{value:any}[]","默认值":"[]"},{rowIndex:3,"属性":"placeholder","说明":"输入框提示内容","类型":"string","默认值":"null"},{rowIndex:4,"属性":"custom","说明":"自定义弹出框","类型":"boolean","默认值":"false"}]}];return(e,o)=>(r(),i(w,{"attr-content-arr":t,"event-content":n}))}});var k=e=>{e.__sourceCode='<template>\n  <AutoComplete\n    v-model:value="value"\n    :options="options"\n    style="width: 200px"\n    placeholder="input here"\n    @select="onSelect"\n    @search="onSearch"\n  />\n</template>\n\n<script setup lang="ts">\nimport { ref } from \'vue\'\nimport { AutoComplete } from \'@/lib\'\n\ninterface MockVal {\n  value: string\n}\nconst value = ref(\'\')\nconst options = ref<MockVal[]>([])\nconst onSearch = (searchText: string) => {\n  options.value = !searchText\n    ? []\n    : [\n        { value: `${searchText}@qq.com` },\n        { value: `${searchText}@google.com` },\n        { value: `${searchText}@138.com` }\n      ]\n}\nconst onSelect = (text: string) => {\n  console.log(\'onSelect\', text)\n}\n<\/script>',e.__sourceTitle="基本用法"};const j=c({__name:"DemoOne",setup(e){const n=h(""),o=h([]),l=e=>{o.value=e?[{value:`${e}@qq.com`},{value:`${e}@google.com`},{value:`${e}@138.com`}]:[]},a=e=>{console.log("onSelect",e)};return(e,s)=>(r(),i(v(t),{value:n.value,"onUpdate:value":s[0]||(s[0]=e=>n.value=e),options:o.value,style:{width:"200px"},placeholder:"input here",onSelect:a,onSearch:l},null,8,["value","options"]))}});k(j);var q=e=>{e.__sourceCode='<template>\n  <AutoComplete\n    v-model:value="value"\n    :options="options"\n    style="width: 200px"\n    placeholder="input here"\n    @select="onSelect"\n    @search="onSearch"\n  >\n    <template #option="item">\n      <span style="color: red">{{ item.value }}</span>\n    </template>\n  </AutoComplete>\n</template>\n\n<script setup lang="ts">\nimport { ref } from \'vue\'\nimport { AutoComplete } from \'@/lib\'\n\ninterface MockVal {\n  value: string\n}\nconst value = ref(\'\')\nconst options = ref<MockVal[]>([])\nconst onSearch = (searchText: string) => {\n  options.value = !searchText\n    ? []\n    : [\n        { value: `${searchText}@qq.com` },\n        { value: `${searchText}@google.com` },\n        { value: `${searchText}@138.com` },\n        { value: `${searchText}@189.com` },\n        { value: `${searchText}@email.com` }\n      ]\n}\nconst onSelect = (text: string) => {\n  console.log(\'onSelect\', text)\n}\n<\/script>',e.__sourceTitle="自定义每条数据渲染方式"};const F={style:{color:"red"}},M=c({__name:"DemoTwo",setup(e){const n=h(""),o=h([]),l=e=>{o.value=e?[{value:`${e}@qq.com`},{value:`${e}@google.com`},{value:`${e}@138.com`},{value:`${e}@189.com`},{value:`${e}@email.com`}]:[]},a=e=>{console.log("onSelect",e)};return(e,s)=>(r(),i(v(t),{value:n.value,"onUpdate:value":s[0]||(s[0]=e=>n.value=e),options:o.value,style:{width:"200px"},placeholder:"input here",onSelect:a,onSearch:l},{option:p((e=>[g("span",F,x(e.value),1)])),_:1},8,["value","options"]))}});q(M);var U=e=>{e.__sourceCode='<template>\n  <div class="wrap">\n    <AutoComplete\n      v-model:value="value"\n      :options="dataSource"\n      style="width: 200px"\n      placeholder="input here"\n      custom\n    >\n      <template #option="item">\n        <div style="color: orange; margin-bottom: 10px">\n          <span style="font-size: 12px; padding: 4px 11px">{{ item.value.label }}</span>\n          <div\n            v-for="s in item.value.options"\n            :key="s"\n            class="item"\n            @mousedown="value = s.value"\n          >\n            <span>{{ s.value }}</span>\n            <div class="count">\n              <span>\n                <SvgIcon name="user" width="12px" height="12px" fill="orange" />\n              </span>\n              <span>{{ s.count }}</span>\n            </div>\n          </div>\n        </div>\n      </template>\n    </AutoComplete>\n    <Button @click="onSubmit">\n      <template #icon>\n        <SvgIcon name="search"></SvgIcon>\n      </template>\n    </Button>\n  </div>\n</template>\n\n<script setup lang="ts">\nimport { ref } from \'vue\'\nimport { AutoComplete, SvgIcon, Button } from \'@/lib\'\n\ninterface MockVal {\n  value: string\n}\nconst value = ref(\'\')\nconst options = ref<MockVal[]>([])\nconst onSelect = (text: string) => {\n  console.log(\'onSelect\', text)\n}\nconst onSubmit = () => {\n  console.log(value.value)\n}\nconst dataSource = [\n  {\n    value: {\n      label: \'Libraries\',\n      options: [\n        {\n          value: \'CustomDesignVue\',\n          count: 10000\n        },\n        {\n          value: \'CustomDesignVue UI\',\n          count: 10600\n        }\n      ]\n    }\n  },\n  {\n    value: {\n      label: \'Solutions\',\n      options: [\n        {\n          value: \'CustomDesignVue FQA\',\n          count: 546456\n        },\n        {\n          value: \'CustomDesignVue UI FQA\',\n          count: 534534\n        }\n      ]\n    }\n  },\n  {\n    value: {\n      label: \'Articles\',\n      options: [\n        {\n          value: \'CustomDesignVue Fly\',\n          count: 878787\n        }\n      ]\n    }\n  }\n]\n<\/script>\n\n<style lang="scss" scoped>\n.wrap {\n  display: flex;\n  align-items: stretch;\n  .item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    width: 300px;\n    padding: 4px 11px;\n    line-height: 1.5em;\n    &:hover {\n      background: #1890ff;\n      cursor: pointer;\n    }\n    > .count {\n      display: flex;\n      align-items: center;\n      gap: 5px;\n      text-align: center;\n      span {\n        display: flex;\n        align-items: center;\n      }\n    }\n  }\n}\n</style>',e.__sourceTitle="更复杂的渲染"};const Q={class:"wrap"},B={style:{color:"orange","margin-bottom":"10px"}},z={style:{"font-size":"12px",padding:"4px 11px"}},L=["onMousedown"],N={class:"count"},O=c({__name:"DemoThree",setup(e){const n=h("");h([]);const a=()=>{console.log(n.value)},s=[{value:{label:"Libraries",options:[{value:"CustomDesignVue",count:1e4},{value:"CustomDesignVue UI",count:10600}]}},{value:{label:"Solutions",options:[{value:"CustomDesignVue FQA",count:546456},{value:"CustomDesignVue UI FQA",count:534534}]}},{value:{label:"Articles",options:[{value:"CustomDesignVue Fly",count:878787}]}}];return(e,u)=>(r(),f("div",Q,[m(v(t),{value:n.value,"onUpdate:value":u[0]||(u[0]=e=>n.value=e),options:s,style:{width:"200px"},placeholder:"input here",custom:""},{option:p((e=>[g("div",B,[g("span",z,x(e.value.label),1),(r(!0),f(_,null,C(e.value.options,(e=>(r(),f("div",{key:e,class:"item",onMousedown:t=>n.value=e.value},[g("span",null,x(e.value),1),g("div",N,[g("span",null,[m(v(o),{name:"user",width:"12px",height:"12px",fill:"orange"})]),g("span",null,x(e.count),1)])],40,L)))),128))])])),_:1},8,["value"]),m(v(l),{onClick:a},{icon:p((()=>[m(v(o),{name:"search"})])),_:1})]))}});U(O);var P=y(O,[["__scopeId","data-v-2ddff54c"]]);const E=c({__name:"Demo",setup(n){const t=S((()=>[j,M,P].map(((e,n)=>b(e,"autoComplete",n)))));return(n,o)=>(r(),i(e,{"demo-arr":v(t)},null,8,["demo-arr"]))}}),G=c({__name:"Index",setup(e){h(null);const t=["基本用法","自定义每条数据渲染方式","更复杂的渲染"],o=S((()=>A("autoComplete",t)));return(e,t)=>(r(),i(n,{"nav-arr":v(o),title:"AutoComplete 自动完成","component-name":"autoComplete"},{intro:p((()=>[m(V)])),demo:p((()=>[m(E)])),api:p((()=>[m($)])),_:1},8,["nav-arr"]))}});export{G as default};
