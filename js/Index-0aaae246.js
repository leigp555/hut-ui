import{_ as e,P as n,T as o,g as a,D as l,a as t,b as c}from"./DemoDisplay-30e28096.js";import{f as r,g as u}from"./Paragraph.vue_vue_type_style_index_0_lang-de84b885.js";import{d as s,o as p,g as d,w as h,e as i,l as m,h as v,b as k,r as _,z as b}from"./index-7adc59d4.js";/* empty css                                                */import{_ as C}from"./ApiIntro-ecd1af8a.js";const g=k("p",null,"多选框。",-1),f=k("ul",null,[k("li",null,"Checkbox: 主要组件")],-1),x=k("ul",null,[k("li",null,"在一组可选项中进行多项选择时；"),k("li",null," 单独使用可以表示两种状态之间的切换，和 switch 类似。区别在于切换 switch 会直接触发状态改变，而 checkbox 一般用于状态标记，需要和提交操作配合。 ")],-1),w=s({__name:"Intro",setup:a=>(a,l)=>(p(),d(m(o),null,{default:h((()=>[i(m(e),null,{default:h((()=>[v("简介")])),_:1}),i(m(n),null,{default:h((()=>[g])),_:1}),i(m(e),null,{default:h((()=>[v("组件概览")])),_:1}),i(m(n),null,{default:h((()=>[f])),_:1}),i(m(e),null,{default:h((()=>[v("使用场景")])),_:1}),i(m(n),null,{default:h((()=>[x])),_:1})])),_:1}))}),O=s({__name:"Api",setup(e){const n=[{rowIndex:1,"事件名称":"change","说明":"选项状态改变时的回调","回调参数":"(checked:boolean) => void"}],o=[{componentName:"Checkbox",attrContent:[{rowIndex:1,"属性":"checked","说明":"是否勾选","类型":"boolean","默认值":"false"},{rowIndex:2,"属性":"disabled","说明":"是否禁用","类型":"boolean","默认值":"false"}]},{componentName:"Title",attrContent:[{rowIndex:1,"属性":"value","说明":"选中的选项","类型":" CheckBoxOption[]","默认值":"[]"},{rowIndex:2,"属性":"options","说明":"选项数据","类型":" CheckBoxOption[]","默认值":"[]"},{rowIndex:3,"属性":"direction","说明":"分布方式","类型":"'row' | 'column'","默认值":"row"}]}];return(e,a)=>(p(),d(C,{"attr-content-arr":o,"event-content":n}))}});var B=e=>{e.__sourceCode='<template>\n  <Checkbox v-model:checked="checked" @change="onChange">Checkbox</Checkbox>\n</template>\n\n<script setup lang="ts">\nimport { ref } from \'vue\'\nimport { Checkbox } from \'ant\'\n\nconst checked = ref(true)\nconst onChange = (isChecked: boolean) => {\n  console.log(isChecked)\n}\n<\/script>',e.__sourceTitle=" 基本用法 "};const D=s({__name:"DemoOne",setup(e){const n=_(!0),o=e=>{console.log(e)};return(e,a)=>(p(),d(m(r),{checked:n.value,"onUpdate:checked":a[0]||(a[0]=e=>n.value=e),onChange:o},{default:h((()=>[v("Checkbox")])),_:1},8,["checked"]))}});B(D);var I=e=>{e.__sourceCode="<template>\n  <Checkbox v-model:checked=\"checked\" disabled>Checkbox</Checkbox>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { Checkbox } from 'ant'\n\nconst checked = ref(true)\n<\/script>",e.__sourceTitle=" 禁用 "};const T=s({__name:"DemoTwo",setup(e){const n=_(!0);return(e,o)=>(p(),d(m(r),{checked:n.value,"onUpdate:checked":o[0]||(o[0]=e=>n.value=e),disabled:""},{default:h((()=>[v("Checkbox")])),_:1},8,["checked"]))}});I(T);var A=e=>{e.__sourceCode="<template>\n  <CheckboxGroup v-model:value=\"value\" :options=\"options\" @change=\"onChange\" />\n</template>\n\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { CheckboxGroup, CheckBoxOption } from '@/lib'\n\nconst value = ref<CheckBoxOption[]>([])\nconst options = [\n  { label: 'Apple', value: 'apple', checked: false },\n  { label: 'Pear', value: 'pear', checked: false },\n  { label: 'Orange', value: 'orange', checked: false }\n]\nconst onChange = (newValue: CheckBoxOption[]) => {\n  console.log(newValue)\n}\n<\/script>",e.__sourceTitle="多选组"};const P=s({__name:"DemoThree",setup(e){const n=_([]),o=[{label:"Apple",value:"apple",checked:!1},{label:"Pear",value:"pear",checked:!1},{label:"Orange",value:"orange",checked:!1}],a=e=>{console.log(e)};return(e,l)=>(p(),d(m(u),{value:n.value,"onUpdate:value":l[0]||(l[0]=e=>n.value=e),options:o,onChange:a},null,8,["value"]))}});A(P);var G=e=>{e.__sourceCode="<template>\n  <CheckboxGroup v-model:value=\"value\" :options=\"options\" @change=\"onChange\" />\n</template>\n\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { CheckboxGroup, CheckBoxOption } from '@/lib'\n\nconst value = ref<CheckBoxOption[]>([])\nconst options = [\n  { label: 'Apple', value: 'apple', checked: false },\n  { label: 'Pear', value: 'pear', checked: false },\n  { label: 'Orange', value: 'orange', checked: false, disabled: true }\n]\nconst onChange = (newValue: CheckBoxOption[]) => {\n  console.log(newValue)\n}\n<\/script>",e.__sourceTitle="多选组禁用"};const V=s({__name:"DemoFour",setup(e){const n=_([]),o=[{label:"Apple",value:"apple",checked:!1},{label:"Pear",value:"pear",checked:!1},{label:"Orange",value:"orange",checked:!1,disabled:!0}],a=e=>{console.log(e)};return(e,l)=>(p(),d(m(u),{value:n.value,"onUpdate:value":l[0]||(l[0]=e=>n.value=e),options:o,onChange:a},null,8,["value"]))}});G(V);var j=e=>{e.__sourceCode="<template>\n  <CheckboxGroup\n    v-model:value=\"value\"\n    :options=\"options\"\n    direction=\"column\"\n    @change=\"onChange\"\n  />\n</template>\n\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { CheckboxGroup, CheckBoxOption } from '@/lib'\n\nconst value = ref<CheckBoxOption[]>([])\nconst options = [\n  { label: 'Apple', value: 'apple', checked: false },\n  { label: 'Pear', value: 'pear', checked: false },\n  { label: 'Orange', value: 'orange', checked: false }\n]\nconst onChange = (newValue: CheckBoxOption[]) => {\n  console.log(newValue)\n}\n<\/script>",e.__sourceTitle="垂直分布"};const y=s({__name:"DemoFive",setup(e){const n=_([]),o=[{label:"Apple",value:"apple",checked:!1},{label:"Pear",value:"pear",checked:!1},{label:"Orange",value:"orange",checked:!1}],a=e=>{console.log(e)};return(e,l)=>(p(),d(m(u),{value:n.value,"onUpdate:value":l[0]||(l[0]=e=>n.value=e),options:o,direction:"column",onChange:a},null,8,["value"]))}});j(y);const U=s({__name:"Demo",setup(e){const n=b((()=>[D,T,P,V,y].map(((e,n)=>a(e,"checkbox",n)))));return(e,o)=>(p(),d(l,{"demo-arr":m(n)},null,8,["demo-arr"]))}}),F=s({__name:"Index",setup(e){_(null);const n=["基本用法","禁用","多选组","多选组禁用","垂直分布"],o=b((()=>c("checkbox",n)));return(e,n)=>(p(),d(t,{"nav-arr":m(o),title:"Checkbox 多选框","component-name":"checkbox"},{intro:h((()=>[i(w)])),demo:h((()=>[i(U)])),api:h((()=>[i(O)])),_:1},8,["nav-arr"]))}});export{F as default};
