import{_ as e,P as n,T as o,g as a,D as l,C as t,a as c}from"./DemoDisplay-d14d3ff9.js";import{f as r}from"./Paragraph.vue_vue_type_style_index_0_lang-1a82c502.js";import{d as u,o as s,g as p,w as d,e as h,l as i,h as m,b as v,r as k,z as _}from"./index-54c84176.js";/* empty css                                                */import{_ as b}from"./ApiIntro-50aaf7d6.js";import{_ as C}from"./CheckboxGroup-36e21d09.js";const f=v("p",null,"多选框。",-1),g=v("ul",null,[v("li",null,"Checkbox: 主要组件")],-1),x=v("ul",null,[v("li",null,"在一组可选项中进行多项选择时；"),v("li",null," 单独使用可以表示两种状态之间的切换，和 switch 类似。区别在于切换 switch 会直接触发状态改变，而 checkbox 一般用于状态标记，需要和提交操作配合。 ")],-1),w=u({__name:"Intro",setup:a=>(a,l)=>(s(),p(i(o),null,{default:d((()=>[h(i(e),null,{default:d((()=>[m("简介")])),_:1}),h(i(n),null,{default:d((()=>[f])),_:1}),h(i(e),null,{default:d((()=>[m("组件概览")])),_:1}),h(i(n),null,{default:d((()=>[g])),_:1}),h(i(e),null,{default:d((()=>[m("使用场景")])),_:1}),h(i(n),null,{default:d((()=>[x])),_:1})])),_:1}))}),O=u({__name:"Api",setup(e){const n=[{rowIndex:1,"事件名称":"change","说明":"选项状态改变时的回调","回调参数":"(checked:boolean) => void"}],o=[{componentName:"Checkbox",attrContent:[{rowIndex:1,"属性":"checked","说明":"是否勾选","类型":"boolean","默认值":"false"},{rowIndex:2,"属性":"disabled","说明":"是否禁用","类型":"boolean","默认值":"false"}]},{componentName:"Title",attrContent:[{rowIndex:1,"属性":"value","说明":"选中的选项","类型":" CheckBoxOption[]","默认值":"[]"},{rowIndex:2,"属性":"options","说明":"选项数据","类型":" CheckBoxOption[]","默认值":"[]"},{rowIndex:3,"属性":"direction","说明":"分布方式","类型":"'row' | 'column'","默认值":"row"}]}];return(e,a)=>(s(),p(b,{"attr-content-arr":o,"event-content":n}))}});var B=e=>{e.__sourceCode='<template>\n  <Checkbox v-model:checked="checked" @change="onChange">Checkbox</Checkbox>\n</template>\n\n<script setup lang="ts">\nimport { ref } from \'vue\'\nimport { Checkbox } from \'ant\'\n\nconst checked = ref(true)\nconst onChange = (isChecked: boolean) => {\n  console.log(isChecked)\n}\n<\/script>',e.__sourceTitle=" 基本用法 "};const D=u({__name:"DemoOne",setup(e){const n=k(!0),o=e=>{console.log(e)};return(e,a)=>(s(),p(i(r),{checked:n.value,"onUpdate:checked":a[0]||(a[0]=e=>n.value=e),onChange:o},{default:d((()=>[m("Checkbox")])),_:1},8,["checked"]))}});B(D);var I=e=>{e.__sourceCode="<template>\n  <Checkbox v-model:checked=\"checked\" disabled>Checkbox</Checkbox>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { Checkbox } from 'ant'\n\nconst checked = ref(true)\n<\/script>",e.__sourceTitle=" 禁用 "};const T=u({__name:"DemoTwo",setup(e){const n=k(!0);return(e,o)=>(s(),p(i(r),{checked:n.value,"onUpdate:checked":o[0]||(o[0]=e=>n.value=e),disabled:""},{default:d((()=>[m("Checkbox")])),_:1},8,["checked"]))}});I(T);var A=e=>{e.__sourceCode="<template>\n  <CheckboxGroup v-model:value=\"value\" :options=\"options\" @change=\"onChange\" />\n</template>\n\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { CheckboxGroup, CheckBoxOption } from '@/lib'\n\nconst value = ref<CheckBoxOption[]>([])\nconst options = [\n  { label: 'Apple', value: 'apple', checked: false },\n  { label: 'Pear', value: 'pear', checked: false },\n  { label: 'Orange', value: 'orange', checked: false }\n]\nconst onChange = (newValue: CheckBoxOption[]) => {\n  console.log(newValue)\n}\n<\/script>",e.__sourceTitle="多选组"};const P=u({__name:"DemoThree",setup(e){const n=k([]),o=[{label:"Apple",value:"apple",checked:!1},{label:"Pear",value:"pear",checked:!1},{label:"Orange",value:"orange",checked:!1}],a=e=>{console.log(e)};return(e,l)=>(s(),p(i(C),{value:n.value,"onUpdate:value":l[0]||(l[0]=e=>n.value=e),options:o,onChange:a},null,8,["value"]))}});A(P);var G=e=>{e.__sourceCode="<template>\n  <CheckboxGroup v-model:value=\"value\" :options=\"options\" @change=\"onChange\" />\n</template>\n\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { CheckboxGroup, CheckBoxOption } from '@/lib'\n\nconst value = ref<CheckBoxOption[]>([])\nconst options = [\n  { label: 'Apple', value: 'apple', checked: false },\n  { label: 'Pear', value: 'pear', checked: false },\n  { label: 'Orange', value: 'orange', checked: false, disabled: true }\n]\nconst onChange = (newValue: CheckBoxOption[]) => {\n  console.log(newValue)\n}\n<\/script>",e.__sourceTitle="多选组禁用"};const j=u({__name:"DemoFour",setup(e){const n=k([]),o=[{label:"Apple",value:"apple",checked:!1},{label:"Pear",value:"pear",checked:!1},{label:"Orange",value:"orange",checked:!1,disabled:!0}],a=e=>{console.log(e)};return(e,l)=>(s(),p(i(C),{value:n.value,"onUpdate:value":l[0]||(l[0]=e=>n.value=e),options:o,onChange:a},null,8,["value"]))}});G(j);var V=e=>{e.__sourceCode="<template>\n  <CheckboxGroup\n    v-model:value=\"value\"\n    :options=\"options\"\n    direction=\"column\"\n    @change=\"onChange\"\n  />\n</template>\n\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { CheckboxGroup, CheckBoxOption } from '@/lib'\n\nconst value = ref<CheckBoxOption[]>([])\nconst options = [\n  { label: 'Apple', value: 'apple', checked: false },\n  { label: 'Pear', value: 'pear', checked: false },\n  { label: 'Orange', value: 'orange', checked: false }\n]\nconst onChange = (newValue: CheckBoxOption[]) => {\n  console.log(newValue)\n}\n<\/script>",e.__sourceTitle="垂直分布"};const y=u({__name:"DemoFive",setup(e){const n=k([]),o=[{label:"Apple",value:"apple",checked:!1},{label:"Pear",value:"pear",checked:!1},{label:"Orange",value:"orange",checked:!1}],a=e=>{console.log(e)};return(e,l)=>(s(),p(i(C),{value:n.value,"onUpdate:value":l[0]||(l[0]=e=>n.value=e),options:o,direction:"column",onChange:a},null,8,["value"]))}});V(y);const U=u({__name:"Demo",setup(e){const n=_((()=>[D,T,P,j,y].map(((e,n)=>a(e,"checkbox",n)))));return(e,o)=>(s(),p(l,{"demo-arr":i(n)},null,8,["demo-arr"]))}}),F=u({__name:"Index",setup(e){k(null);const n=["基本用法","禁用","多选组","多选组禁用","垂直分布"],o=_((()=>c("checkbox",n)));return(e,n)=>(s(),p(t,{"nav-arr":i(o),title:"Checkbox 多选框","component-name":"checkbox"},{intro:d((()=>[h(w)])),demo:d((()=>[h(U)])),api:d((()=>[h(O)])),_:1},8,["nav-arr"]))}});export{F as default};
